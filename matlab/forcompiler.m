function [Y,Xf,Af] = forcompiler(X,~,~)
%MYNEURALNETWORKFUNCTION neural network simulation function.
%
% Auto-generated by MATLAB, 16-Jun-2021 00:03:59.
%
% [Y] = myNeuralNetworkFunction(X,~,~) takes these arguments:
%
%   X = 1xTS cell, 1 inputs over TS timesteps
%   Each X{1,ts} = Qx6 matrix, input #1 at timestep ts.
%
% and returns:
%   Y = 1xTS cell of 1 outputs over TS timesteps.
%   Each Y{1,ts} = Qx2 matrix, output #1 at timestep ts.
%
% where Q is number of samples (or series) and TS is the number of timesteps.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [0.00399441333333333;0.00035674;0.009850148;0.00142868533333333;0.004925624;5.4465e-05];
x1_step1.gain = [2.51254517995929;2.12452698805258;2.53116544277983;2.12304223465719;2.51548793467845;2.01783678936984];
x1_step1.ymin = -1;

% Layer 1
b1 = [-3.1300504384965792681;-2.6691212769733372312;8.6187333678499076228;-0.34413354446756250216;-0.21806345185969000511;0.17705129377478479036;-0.53171920020727603262;0.38495851721547685864;-0.19652222587813497623;2.9981480713690498163];
IW1_1 = [-1.3086072979618630363 -0.70785504153511680236 -0.16500207500252872528 0.29360979471843384747 0.069215201554337954515 -1.0353408814598035192;0.20498463554247231544 4.2600703325534894361 -2.1218026402839598177 -2.547530295657902677 -0.70742496881186589519 0.97604386571774104375;1.2159511751955947023 3.7041164559723438465 1.5145555798397336567 -0.89244280205589487931 -1.315386670836477423 3.6385247999310283973;1.2419791142763207947 0.64516244581878789965 0.99923545159039617314 -1.593614477742193003 -0.076053130048425343634 0.70639322549283423136;0.186914235492313896 1.9214057203687837649 -0.88918239892567418892 -0.91805048593293869796 -0.41189460475006178797 0.14839743111909425854;-2.4013459779657360116 -0.54815040528628922178 0.17268743690325061291 2.0200144259040939687 0.16078387122079279559 -0.72053005617929521964;0.96730503385218202794 -1.6354116689997044709 -0.078336202138439753329 0.98689173229954074706 0.1268364188906207779 1.8337325604623024855;0.29094765597224320208 3.0924320967499663304 -1.7082829852643188762 -1.2865769986002679737 -0.59380358409738542846 0.35631946070125786186;1.0470678792870651286 -1.6142037833689031334 -0.077765392404141611693 1.2233226860963006821 0.20423419629854225321 1.6563474040241250584;2.421372915758730926 1.3906986599669530769 -1.4274388792707952689 0.47776625922620935549 0.16502189913596765347 1.1243417608093895232];

% Layer 2
b2 = [-0.2024804152117739009;0.34685497609950338704];
LW2_1 = [2.8312784410765807763 1.340045468044367194 2.3473352825350715101 1.2039214975628806936 -4.6154708648629112488 1.2719862260178889102 0.1164774686473903087 2.6144358749564626798 -0.55921497079407689323 0.88092053258662206261;1.0291606717713184249 0.022462686397221001688 1.4160789378041036546 0.079480438900746894215 -0.046331238666979593366 0.048910338568506343815 1.5001625282244708259 -0.07095707183751712166 -1.4466593702300551971 0.11601724246690202358];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = [1;1];
y1_step1.xoffset = [-1;-1];

% ===== SIMULATION ========

% Format Input Arguments
isCellX = iscell(X);
if ~isCellX
    X = {X};
end

% Dimensions
TS = size(X,2); % timesteps
if ~isempty(X)
    Q = size(X{1},1); % samples/series
else
    Q = 0;
end

% Allocate Outputs
Y = cell(1,TS);

% Time loop
for ts=1:TS
    
    % Input 1
    X{1,ts} = X{1,ts}';
    Xp1 = mapminmax_apply(X{1,ts},x1_step1);
    
    % Layer 1
    a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*Xp1);
    
    % Layer 2
    a2 = repmat(b2,1,Q) + LW2_1*a1;
    
    % Output 1
    Y{1,ts} = mapminmax_reverse(a2,y1_step1);
    Y{1,ts} = Y{1,ts}';
end

% Final Delay States
Xf = cell(1,0);
Af = cell(2,0);

% Format Output Arguments
if ~isCellX
    Y = cell2mat(Y);
end
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
y = bsxfun(@minus,x,settings.xoffset);
y = bsxfun(@times,y,settings.gain);
y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
x = bsxfun(@minus,y,settings.ymin);
x = bsxfun(@rdivide,x,settings.gain);
x = bsxfun(@plus,x,settings.xoffset);
end
